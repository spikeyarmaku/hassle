before evaluation, the source code is converted into a scott-encoded tree

Syntax

(State)         s  ::= 〈c, σ, μ〉
(Term)          t  ::= v | λv.t | t t | op | Ϝ
(PrimOp)        op ::= + | − | ∗ | / | = | > | <
(Variable)      v ∈ string
(Closure)       c ::= t[l]
(Value)         v ::= λv.t[l] | v[l]
(Heap)          μ ::= ε | μ[(v, l) → ρ]
(Environment)   ρ ::= • | c · l
(Context)       σ ::=  | σ c | σ u
(Location)      l, u, f ∈ N

Semantics

Update a value at a certain environment frame with the current closure
(Upd) 〈v, σ u, μ〉→CE〈v, σ, μ(u → v · l)〉 where c · l = μ(u)

Introduce a new frame into the environment
(Lam) 〈λv.t[l], σ c, μ〉 →CE〈t[f], σ, μ[(v, f) → c · l]〉 f ∈ dom(μ)

Put the second term onto the stack and make the first term the current closure
(App) 〈t t′[l], σ, μ〉→CE〈t[l], σ t′[l], μ〉

Look up the var's value and make it the current closure, while putting its
location onto the stack
(Var) 〈v[l], σ, μ〉→CE〈c, σ l, μ〉 where c · l′ = μ(l)

literals and operators addition:

Swap the current closure and the top of the stack
(Val) 〈n[l], σ c, μ〉→CE〈c, σ n[l], μ〉

Take the necessary amount of items off the stack, and apply them with the
current operator
(Op)  〈op[l], σ n′ n, μ〉→CE〈op(n′, n)[l], σ, μ〉

Traverse the stack for the var's true value, which is anything but a variable,
and replace the control's term part with it
(Vau) 〈Ϝ v[l], σ, μ〉→CE〈c[l], σ, μ〉 where c · l′ = μ(l)

Notes:
- eval: if the term is null, panic, otherwise eval the first elem and apply the
unevaluated rest
