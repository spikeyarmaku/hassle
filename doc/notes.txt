upside of operatives being curried: modules are just partially applied `let`s

interactive programming checklist:
- You need to be able to easily redefine most things.
    For example, CL and Smalltalk both have hooks for updating instances of a
    class when the class itself changes. Python fails in this regard because if
    you e.g. import a function in more than one module, it becomes very
    challenging to redefine the function in all places. Even just reloading a
    single module in a single place is recommended against (though that is
    relatively easy to do).
- Define a datatype. I mean a class, a struct, a record type–whatever
    user-defined type your favorite language supports. Make some instances of
    it. Write some functions (or methods, or procedures, or whatever) to operate
    on them. Now change the definition of the type. What happens? Does your
    language runtime notice that the definition of the type has changed? Does it
    realize that the existing instances have a new definition? When something
    touches one of them, does it automatically reinitialize it to conform to the
    new definition, or, if it doesn’t know how to do that, does it start a
    breakloop and ask you what to do about it?
- You don’t want to have to kill your program and rebuild it from scratch just
    because you changed a definition